# INTERNAL UTILITY FUNCTIONS {{{

# Returns whether the given command is executable or aliased.
_has() {
  return $( whence $1 >/dev/null )
}

# Returns whether the given statement executed cleanly. Try to avoid this
# because this slows down shell loading.
_try() {
  return $( eval $* >/dev/null 2>&1 )
}

# Returns whether the current host type is what we think it is. (HOSTTYPE is
# set later.)
_is() {
  return $( [ "$HOSTTYPE" = "$1" ] )
}

# Returns whether out terminal supports color.
_color() {
  return $( [ -z "$INSIDE_EMACS" ] )
}

# Returns the version of a command if present, or n/a if unavailable.
_versionof() {
  if _has "$1"; then
    echo "$1 $($1 --version)"
  else
    echo "$1 n/a"
  fi
}

_log_status() {
    tput setaf 6
    echo $1
    tput sgr0
}

_log_warning() {
    tput setaf 3
    echo $1
    tput sgr0
}

_log_error() {
    tput setaf 1
    echo $1
    tput sgr0
}

# }}} INTERNAL UTILITY FUNCTIONS

# ENVIRONMENT VARIABLES {{{

export DISABLE_AUTO_TITLE='true'
export TERM=screen-256color
# export CXX="ccache clang++"
# export CC="ccache clang"
export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"

# Utility variables.
if which hostname >/dev/null 2>&1; then
  HOSTNAME=`hostname`
elif which uname >/dev/null 2>&1; then
  HOSTNAME=`uname -n`
else
  HOSTNAME=unknown
fi
export HOSTNAME

# HOSTTYPE = { Linux | OpenBSD | SunOS | etc. }
if which uname >/dev/null 2>&1; then
  HOSTTYPE=`uname -s`
else
  HOSTTYPE=unknown
fi
export HOSTTYPE

# EDITOR
if _has nvim; then
  export NVIM_TUI_ENABLE_TRUE_COLOR=1
  export EDITOR=nvim VISUAL=nvim
elif _has vim; then
  export EDITOR=vim VISUAL=vim
elif _has vi; then
  export EDITOR=vi VISUAL=vi
fi

# Overridable locale support.
if [ -z $$LC_ALL ]; then
  export LC_ALL=en_US.UTF-8
fi
if [ -z $LC_CTYPE ]; then
  export LC_CTYPE=en_US.UTF-8
fi
if [ -z $LANG ]; then
  export LANG=en_US.UTF-8
fi
if [ -z $LANGUAGE ]; then
  export LANGUAGE=en_US.UTF-8
fi

# History control. Don't bother with history if we can't write to the file,
# like if we're using sudo.
if [ -w ~/.zsh_history -o -w ~ ]; then
  SAVEHIST=100000
  HISTSIZE=100000
  HISTFILE=~/.zsh_history
fi

# }}} ENVIRONMENT VARIABLES

# APPLICATION CUSTOMIZATIONS {{{

# GNU grep
if _color; then
  export GREP_COLOR='1;32'
fi

# GNU and BSD ls colorization.
if _color; then
  export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=33:so=01;35:bd=33;01:cd=33;01:or=01;05;37;41:mi=01;37;41:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:'
  export LSCOLORS='ExGxFxdxCxDxDxcxcxxCxc'
  export CLICOLOR=1
fi

# gtest
if _color; then
  export GTEST_COLOR=1
fi

# }}} APPLICATION CUSTOMIZATIONS

# ALIASES {{{

# edit config
alias sc="source $HOME/.zshrc"
alias st="tmux source $HOME/.tmux.conf"
alias zc="$EDITOR $HOME/.zshrc"
alias zcc="$EDITOR $HOME/.zshrc.custom"
alias zcg="$EDITOR $HOME/.zshrc.general"
alias zci="$EDITOR $HOME/.zshrc.zinit"
alias zco="$EDITOR $HOME/.zshrc.oh-my-zsh"
alias zs="$EDITOR $HOME/.ssh/config"
alias zv="$EDITOR $HOME/.vim/vimrc"
alias zt="$EDITOR $HOME/.tmux.conf"

# pull updates
alias ud="cd $HOME/.dotfiles/ && git pull && cd -"
alias udp="cd $HOME/.dotfiles-personal/ && git pull && cd -"
alias uy="cd $HOME/.ysvim/ && git pull && cd -"

# quick jump
alias j="autojump"
alias jd="[ -d $HOME/.dotfiles ] && cd $HOME/.dotfiles"
alias jdp="[ -d $HOME/.dotfiles-personal ] && cd $HOME/.dotfiles-personal"
alias jv="[ -d $HOME/.ysvim ] && cd $HOME/.ysvim"
alias jw="[ -d $HOME/Workspace ] && cd $HOME/Workspace"
alias jg="[ -d $HOME/Github ] && cd $HOME/Github"
alias jt="[ -d $HOME/.tmp ] && cd $HOME/.tmp"

# ls (from common-aliases)
alias l='ls -lFh'     #size,show type,human readable
alias la='ls -lAFh'   #long list,show almost all,show type,human readable
alias lr='ls -tRFh'   #sorted by date,recursive,show type,human readable
alias lt='ls -ltFh'   #long list,sorted by date,show type,human readable
alias ll='ls -lh'     #long list
alias ldot='ls -ld .*'
alias lS='ls -1FSsh'
alias lart='ls -1Fcart'
alias lrt='ls -1Fcrt'

# make
alias mk='make -j`nproc`'
alias mc='make clean'

# git
alias ci='git add . && git commit -m "ci" && git push'

# grep
alias grep='grep --color'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS}'
alias hst='fc -El 0'
alias hsg='fc -El 0 | grep'
alias psg='ps aux | grep'

# head and tail
# alias -g H='| head'
# alias -g T='| tail'
# alias -g G='| grep'
# alias -g L="| less"
# alias -g M="| most"
# alias -g LL="2>&1 | less"
# alias -g CA="2>&1 | cat -A"
# alias -g NE="2> /dev/null"
# alias -g NUL="> /dev/null 2>&1"
# alias -g P="2>&1| pygmentize -l pytb"
#
# find
alias fd='find . -type d -name' # find directories in current path
alias ff='find . -type f -name' # find files in current path
alias fdr='sudo find / -type d -name' # find directories in root path
alias ffr='sudo find / -type f -name' # find files in root path

# dangerous operations with prompt and verbose
alias mv='mv -i -v'
alias rm='rm -i -v'
alias cp='cp -v'
alias chmod='chmod -v'
alias chown='chown -v'
alias rename='rename -v'

# tmux
alias t='tmux'
alias tls='tmux list-sessions'
alias tlp='tmux list-panes'
alias ta='tmux attach -t'
alias ts='tmux new -s'
alias tks='tmux kill-session -t'
alias tkw='tmux kill-window -t'
alias tload='tmuxp load'

# python
alias py3='python3'
alias py2='python2'
alias pip3='python3 -m pip'
alias pip2='python2 -m pip'
alias pip3upgrade='pip3 install -U $(pip3 list --outdated --format=freeze | awk "{split($0, a, \"==\"); print a[1]}")'

# print info
alias dfh='df -hlT'
alias gput='watch -n 1 nvidia-smi'
alias tree='tree -F -A -I CVS'

# search tool
if _has rg; then
  alias rg='rg --colors path:fg:green --colors match:fg:red'
  alias ag=rg
  alias ack=rg
elif _has ag; then
  alias ack=ag
  alias ag='ag --color-path 1\;31 --color-match 1\;32 --color'
elif _has ack; then
  if ! _color; then
    alias ack='ack --nocolor'
  fi
fi

# misc
alias ar='aria2c --conf-path=$HOME/.aria2/aria2.conf -D'
alias v='$EDITOR'
alias typora='open -a typora'

# }}} ALIASES

# EXTERNAL UTILITY FUNCTIONS {{{

tssh () {
  TPID=$(tmux list-panes -F "#{pane_active} #{pane_pid}" | awk "\$1==1 {\$1=\"\"; print}" | sed "s/^[ \\t]*//;s/[ \\t]*$//")
  TTTY=$(ps -ao pid,tty,args | sort | awk -v TPID=$TPID "\$1 == TPID {\$1=\"\"; \$3=\"\"; print}" | sed "s/^[ ]*//;s/[ ]*$//")
  TSSH=$(ps -ao pid,tty,args | sort | awk -v TTTY=$TTTY "\$2 ~ TTTY && \$3 ~ /ssh/ {\$1=\"\"; \$2=\"\"; print}" | sed "s/^[ \\t]*//;s/[ \\t]*$//")
  export TPID=$TPID
  export TTTY=$TTTY
  export TSSH=$TSSH
  print $TPID
  print $TTTY
  print $TSSH
 }

twcall () {
  for _pane in $(tmux list-panes -F '#{pane_id}'); do
    tmux send-key -t ${_pane} C-z "$1" Enter
  done
}

tscall () {
  for _pane in $(tmux list-panes -s -F '#{pane_id}'); do
    tmux send-key -t ${_pane} C-z "$1" Enter
  done
}

tacall () {
  for _pane in $(tmux list-panes -a -F '#{pane_id}'); do
    tmux send-key -t ${_pane} C-z "$1" Enter
  done
}

replace_name () {
  file_pattern=$1
  before=$2
  after=$3
  for f in `find . -name "$file_pattern"`; do
    mv -i "${f}" "${f/$before/$after}";
  done
}

replace_content () {
  file_pattern=$1
  before=$2
  after=$3
  for f in `find . -name "$file_pattern"`; do
    sed -i "s/$before/$after/g" $f;
  done
}

replace_encoding () {
  file_pattern=$1
  before=$2
  after=$3
  mkdir -p converted
  for f in `find . -name "$file_pattern"`; do
    iconv -f $before -t $after > "converted/$f";
  done
}

# rsync to distination host
rto () {
  rflags=${@:1:-1}
  inputpath=${@: -1}
  relpath=$(pwd | sed "s#$HOME#\$HOME#g")
  if [[ $inputpath == *":"* ]] ; then
    dstpath=${inputpath#*:}
    dsthost=${inputpath%:*}
    [[ ! " ${rflags[@]} " =~ " -q " ]] && _log_status "Rsync $relpath to $dsthost:$dstpath ..."
  else
    dstpath=$(dirname $(pwd) | sed "s#$HOME#\$HOME#g")
    dsthost=${inputpath}
    [[ ! " ${rflags[@]} " =~ " -q " ]] && _log_status "Rsync $relpath to $dsthost:$relpath ..."
  fi

  if [[ ! " ${rflags[@]} " =~ " -q " ]]; then
    [ ! -z ${rflags} ] && _log_status "Additional flags: ${rflags}"
    echo "Press any key to continue (or abort with Ctrl-C) ... "
    read -n 1 key
  fi

  if [ -e "$(pwd)/exclude.txt" ] ; then
    rsync -avP ${rflags} --exclude-from="$(pwd)/exclude.txt" $(pwd) $dsthost:$dstpath
  elif [ -e "$(pwd)/.gitignore" ] ; then
    rsync -avP ${rflags} --filter=":- $(pwd)/.gitignore" $(pwd) $dsthost:$dstpath
  else
    rsync -avP ${rflags} $(pwd) $dsthost:$dstpath
  fi
  echo
}

# rsync from source host
rfrom () {
  rflags=${@:1:-1}
  inputpath=${@: -1}
  relpath=$(pwd | sed "s#$HOME#\$HOME#g")
  parentdir=$(dirname $(pwd))
  if [[ $inputpath == *":"* ]] ; then
    dstpath=${inputpath#*:}
    dsthost=${inputpath%:*}
  else
    dstpath=${relpath}
    dsthost=${inputpath}
  fi

  if [[ ! " ${rflags[@]} " =~ " -q " ]]; then
    _log_status "Rsync $relpath from $dsthost:$dstpath ..."
    [ ! -z ${rflags} ] && _log_status "Additional flags: ${rflags}"
    echo "Press any key to continue (or abort with Ctrl-C) ... "
    read -n 1 key
  fi

  if [ -e "$(pwd)/exclude.txt" ] ; then
    rsync -avP ${rflags} --exclude-from="$(pwd)/exclude.txt" ${dsthost}:${dstpath} ${parentdir}
  elif [ -e "$(pwd)/.gitignore" ] ; then
    rsync -avP ${rflags} --filter=":- $(pwd)/.gitignore" ${dsthost}:${dstpath} ${parentdir}
  else
    rsync -avP ${rflags} ${dsthost}:${relpath} ${parentdir}
  fi
}

rcp() {
  if [ -e "$(pwd)/exclude.txt" ] ; then
    rsync -avP --exclude-from="$(pwd)/exclude.txt" $@
  elif [ -e "$(pwd)/.gitignore" ] ; then
    rsync -avP --filter=":- $(pwd)/.gitignore" $@
  else
    rsync -avP $@
  fi
}

wrto () {
  _log_status "Synchronizing..."
  rto $@

  _log_status "Watching for changes. Quit anytime with Ctrl-C."
  if [ -e "$(pwd)/.gitignore" ] ; then
    fswatch . | while read file; do git check-ignore -q $file || echo $file && rto $@; done
  else
    fswatch . | while read file; do echo $file && rto $@; done
  fi
}

# proxy
export CUSTOM_HTTP_PROXY='http://localhost:6152'
export CUSTOM_SOCKS5_PROXY='socks5://localhost:6153'
proxy () {
  export http_proxy=$CUSTOM_HTTP_PROXY
  export HTTPS_PROXY=$http_proxy
  export HTTP_PROXY=$http_proxy
  export FTP_PROXY=$http_proxy
  export https_proxy=$http_proxy
  export ftp_proxy=$http_proxy
  export NO_PROXY="local-delivery,local-auth"
  export no_proxy=$NO_PROXY
  _log_status "Proxy on"
}
unproxy () {
  unset http_proxy
  unset HTTPS_PROXY
  unset HTTP_PROXY
  unset FTP_PROXY
  unset https_proxy
  unset ftp_proxy
  _log_status "Proxy off"
}
alias pc4=proxychains4

# journal
JOURNAL_ROOT=$HOME/Workspace/journal
journal_grep() {
  if _has rg; then
    rg -t md --sort-files -e $@ $JOURNAL_ROOT
  else
    grep --include=\*.md -irnw $JOURNAL_ROOT -e $@
  fi
}
journal_create() {
  [ -d $JOURNAL_ROOT ] && mkdir -p $JOURNAL_ROOT/$(date +%Y)/; touch $JOURNAL_ROOT/$(date +%Y)/$(date +%Y-%m-%d).md
}
journal_open_vim() {
  if [ "$#" -ne 1 ]; then
    journal_create
    v $JOURNAL_ROOT/$(date +%Y)/$(date +%Y-%m-%d).md
  else
    v $JOURNAL_ROOT/snippets/${1}.md
  fi
}
journal_open_typora() {
  if [ "$#" -ne 1 ]; then
    journal_create
    typora $JOURNAL_ROOT/$(date +%Y)/$(date +%Y-%m-%d).md
  else
    typora $JOURNAL_ROOT/snippets/${1}.md
  fi
}
alias jj="[ -d $JOURNAL_ROOT ] && cd $JOURNAL_ROOT"
alias vj=journal_open_vim
alias tpj=journal_open_typora
alias sj="[ -d $JOURNAL_ROOT ] && journal_grep"
alias dpj="[ -d $JOURNAL_ROOT ] && cd $JOURNAL_ROOT && ./deploy.sh && cd -"

# search occurance of code and open with editor
vack() {
  if _has rg; then
      $EDITOR `rg --color=never -l $@`
  elif _has ag; then
      $EDITOR `ag --nocolor -l $@`
  else
      $EDITOR `ack -l $@`
  fi
}
alias vag=vack
alias vrg=vack

# quick commands to sync CWD between terminals.
pin() {
  rm -f ~/.pindir
  echo $PWD >~/.pindir
  chmod 0600 ~/.pindir >/dev/null 2>&1
}
pout() {
  cd `cat ~/.pindir`
}

# a quick grep-for-processes.
psl() {
  if _is SunOS; then
    ps -Af | grep -i $1 | grep -v grep
  else
    ps auxww | grep -i $1 | grep -v grep
  fi
}

# }}} EXTERNAL UTILITY FUNCTIONS

# UTILITIES {{{

# virtualenv
setup_venv() {
  export WORKON_HOME=$HOME/.virtualenvs
  if [ -f "$brew_prefix/bin/python3" ] ; then
    if [ -e "$brew_prefix/bin/virtualenvwrapper.sh" ] ; then
      export VIRTUALENVWRAPPER_PYTHON="$brew_prefix/bin/python3"
      source "$brew_prefix/bin/virtualenvwrapper.sh"
    fi
  else
    export VIRTUALENVWRAPPER_PYTHON=$(which python3)
    [ -f /usr/local/bin/virtualenvwrapper.sh ] && source /usr/local/bin/virtualenvwrapper.sh
  fi

  # export PYTHONPATH="$VIRTUAL_ENV/usr/local/lib/python3.6/site-packages:$PYTHONPATH"
  export PKG_CONFIG_PATH="$VIRTUAL_ENV/usr/local/lib/pkgconfig/"
  export LD_LIBRARY_PATH="$VIRTUAL_ENV/usr/local/lib/:$LD_LIBRARY_PATH"
}
alias sv=setup_venv

# miniconda3
setup_conda() {
  CONDA_HOME=$HOME/miniconda3
  # . $HOME/miniconda3/etc/profile.d/conda.sh
  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$("$CONDA_HOME/bin/conda" 'shell.bash' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "$CONDA_HOME/etc/profile.d/conda.sh" ]; then
          . "$CONDA_HOME/etc/profile.d/conda.sh"
      else
          export PATH="$CONDA_HOME/bin:$PATH"
      fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<
  #
  alias cda="conda activate"
  alias cdd="conda deactivate"
  alias cdi="conda install"
  alias cdup="conda update"
  alias cdug="conda upgrade"
  alias cdupg="conda update -n base -c defaults conda"
  alias cdc="conda create"
}
alias scd=setup_conda

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# }}} UTILITIES
