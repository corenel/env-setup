# References:
# - https://github.com/zdharma/zinit
# - https://github.com/Aloxaf/dotfiles

# Initialization {{{

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# initialize zinit
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# }}} Initialization

# Configs {{{

  # Completion {{{

  # not compatible with the tab-completion of rosbash
  # 禁用旧补全系统
  # zstyle ':completion:*' use-compctl false
  # compctl() {
  #     print -P "\n%F{red}Don't use compctl anymore%f"
  # }

  # 缓存补全结果
  zstyle ':completion:*:complete:*' use-cache 1

  # 补全顺序:
  # _complete - 普通补全函数  _extensions - 通过 *.\t 选择扩展名
  # _match    - 和 _complete 类似但允许使用通配符
  # _expand_alias - 展开别名 _ignored - 被 ignored-patterns 忽略掉的
  # zstyle ':completion:*' completer _expand_alias _complete _extensions _match _files
  # 由于某些 completer 调用的代价比较昂贵，第一次调用时不考虑它们
  zstyle -e ':completion:*' completer '
    if [[ $_last_try != "$HISTNO$BUFFER$CURSOR" ]]; then
      _last_try="$HISTNO$BUFFER$CURSOR"
      reply=(_expand_alias _complete _extensions _match _files)
    else
      reply=(_complete _ignored _correct _approximate)
    fi'

  # 增强版文件名补全
  # 0 - 完全匹配 ( Abc -> Abc )      1 - 大写修正 ( abc -> Abc )
  # 2 - 单词补全 ( f-b -> foo-bar )  3 - 后缀补全 ( .cxx -> foo.cxx )
  zstyle ':completion:*:(argument-rest|files):*' matcher-list '' \
      'm:{[:lower:]-}={[:upper:]_}' \
      'r:|[.,_-]=* r:|=*' \
      'r:|.=* r:|=*'
  # zstyle ':completion:*' matcher-list 'b:=*'

  # 不展开普通别名
  zstyle ':completion:*' regular false

  # 结果样式
  zstyle ':completion:*' menu yes select # search
  zstyle ':completion:*' list-grouped false
  zstyle ':completion:*' list-separator ''
  zstyle ':completion:*' group-name ''
  zstyle ':completion:*' verbose yes
  zstyle ':completion:*:matches' group 'yes'
  zstyle ':completion:*:warnings' format '%F{red}%B-- No match for: %d --%b%f'
  zstyle ':completion:*:messages' format '%d'
  zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
  zstyle ':completion:*:descriptions' format '[%d]'

  # 补全当前用户所有进程列表
  zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm,cmd -w -w"
  zstyle ':completion:*:kill:*' ignored-patterns '0'

  # complete manual by their section, from grml
  zstyle ':completion:*:manuals'    separate-sections true
  zstyle ':completion:*:manuals.*'  insert-sections   true

  # 补全第三方 Git 子命令
  zstyle ':completion:*:*:git:*' user-commands ${${(M)${(k)commands}:#git-*}/git-/}

  # color
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

  # 单词中也进行补全
  setopt complete_in_word

  # }}} Completion

  # History {{{

  setopt inc_append_history
  setopt hist_fcntl_lock

  # }}} History

  # Key-bindings {{{


  # }}} Key-bindings

  # Misc {{{

  setopt multios
  setopt listpacked
  setopt interactive_comments
  setopt auto_cd
  setopt prompt_subst

  # }}} Misc

  # Plugin Configs {{{

  ZSH_AUTOSUGGEST_STRATEGY=(history completion)
  ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
  ZSH_AUTOSUGGEST_USE_ASYNC=1
  ZSH_AUTOSUGGEST_MANUAL_REBIND=1
  ZSH_AUTOSUGGEST_COMPLETION_IGNORE='( |man |pikaur -S )*'

  GENCOMP_DIR=$HOME/.zinit/completions

  forgit_add=gai
  forgit_diff=gdi
  forgit_log=glgi

  # local extract="
  # # trim input
  # local in=\${\${\"\$(<{f})\"%\$'\0'*}#*\$'\0'}
  # # get ctxt for current completion
  # local -A ctxt=(\"\${(@ps:\2:)CTXT}\")
  # # real path
  # local realpath=\${ctxt[IPREFIX]}\${ctxt[hpre]}\$in
  # realpath=\${(Qe)~realpath}
  # "
  # zstyle ':fzf-tab:*' single-group ''
  # zstyle ':fzf-tab:complete:_zlua:*' query-string input
  # zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts --preview=$extract'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap
  # zstyle ':fzf-tab:complete:cd:*' extra-opts --preview=$extract'exa -1 --color=always $realpath'

  zstyle ":completion:*:git-checkout:*" sort false
  zstyle ':completion:*:descriptions' format '[%d]'
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
  zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'


  # }}} Plugin Configs

# }}} Configs

# Plugins {{{

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zinit-zsh/z-a-rust \
    zinit-zsh/z-a-as-monitor \
    zinit-zsh/z-a-patch-dl \
    zinit-zsh/z-a-bin-gem-node

# load utilities
zinit light-mode for \
    hlissner/zsh-autopair \
    Aloxaf/gencomp \
    wfxr/forgit
    # skywind3000/z.lua \

# Binary release in archive, from GitHub-releases page.
# After automatic unpacking it provides program "fzf".
zinit ice from"gh-r" as"program"
zinit load junegunn/fzf-bin

zinit light-mode for \
    blockf \
        zsh-users/zsh-completions \
    as="program" atclone="rm -f ^(rgg|agv)" \
        lilydjwg/search-and-view \
    atclone="dircolors -b LS_COLORS > c.zsh" atpull='%atclone' pick='c.zsh' \
        trapd00r/LS_COLORS

# oh-my-zsh plugins
zinit for \
    OMZ::lib/clipboard.zsh \
    OMZ::lib/history.zsh \
    OMZ::lib/directories.zsh \
    OMZ::lib/key-bindings.zsh \
    OMZ::lib/completion.zsh \
    OMZ::lib/git.zsh \
    OMZ::plugins/colored-man-pages/colored-man-pages.plugin.zsh \
    OMZ::plugins/git-extras/git-extras.plugin.zsh \
    OMZ::plugins/systemd/systemd.plugin.zsh \
    OMZ::plugins/sudo/sudo.plugin.zsh \
    OMZ::plugins/git/git.plugin.zsh

# completeion and highlighting
zpcompinit; zpcdreplay

zinit light Aloxaf/fzf-tab
zinit for \
    light-mode zsh-users/zsh-autosuggestions \
    light-mode zdharma/fast-syntax-highlighting \
               zdharma/history-search-multi-word

# }}} Plugins

# Theme {{{

: ${THEME:=p10k}

case $THEME in
    pure)
        zinit ice pick"async.zsh" src"pure.zsh"
        zinit light sindresorhus/pure
        ;;
    p10k)
        [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
        zinit ice depth=1
        zinit light romkatv/powerlevel10k
        ;;
esac

# }}} Theme
