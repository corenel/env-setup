# General {{{

# start a non-login shell by default for each new window
set -g default-command 'zsh'

# Makes vim happy
set-option -sg escape-time 10

# set default terminal
set -ga terminal-overrides ',screen-256color:Tc'
set -g default-terminal "screen-256color"
set -as terminal-overrides ',screen*:sitm=\E[3m'

# Use T as the leader key, not B
unbind C-b
set -g prefix C-t
bind "t" send-prefix

# don't bother me
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

# utf8
set -q -g status-utf8 on
setw -q -g utf8 on

set -g mouse on
set -g history-limit 50000

# }}} General

# Display {{{

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on          # set terminal title
set -g display-panes-time 2000 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time
set -g status-interval 10     # redraw status line every 10 seconds

# }}} Display

# Keybindings {{{

# use vim-like bindings
setw -g mode-keys vi

# reload config
bind r source-file "$HOME/.tmux.conf"

# join pane
# from https://unix.stackexchange.com/a/14301/16225
bind "©" command-prompt -p "Join pane from:"  "join-pane -s ':%%'"
bind "ß" command-prompt -p "Send pane to:"  "join-pane -t ':%%'"
bind M-g command-prompt -p "Join pane from:"  "join-pane -s ':%%'"
bind M-s command-prompt -p "Send pane to:"  "join-pane -t ':%%'"

# window navigation
unbind n
unbind p
bind -r C-p previous-window # select previous window
bind -r C-n next-window     # select next window
bind Tab last-window        # move to last active window
bind C-d detach
bind C-t last-window
# bind "n" next-window
# bind "p" previous-window

# smart pane switching with awareness of vim splits.
# from vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|ssh|mosh?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
# bind-key -T copy-mode-vi C-\ select-pane -l
# restoring clearing screen
bind-key C-r send-keys C-l

# fallback for selecting pane
bind-key -r h select-pane -L
bind-key -r j select-pane -D
bind-key -r k select-pane -U
bind-key -r l select-pane -R

# resize pane
bind-key -r C-h resize-pane -L 5
bind-key -r C-j resize-pane -D 5
bind-key -r C-k resize-pane -U 5
bind-key -r C-l resize-pane -R 5

# open new window/pane
bind "c" new-window -c "#{pane_current_path}"
bind "s" split-window -v -c "#{pane_current_path}"
bind "v" split-window -h -c "#{pane_current_path}"
bind-key "S" split-window -v -p 20 -c "#{pane_current_path}"
bind-key "V" split-window -h -p 20 -c "#{pane_current_path}"

# open new window/pane with last ssh session
# bind C-s split-window -v "$(ps -ao pid,tty,args | sort | awk '$1 ~ /#{pane_pid}/{VAR=$2} $2 ~ VAR && $3 ~ /ssh/{$1=\"\"; $2=\"\"; print}' | tail -1)"
# bind C-v split-window -h "$(ps -ao pid,tty,args | sort | awk '$1 ~ /#{pane_pid}/{VAR=$2} $2 ~ VAR && $3 ~ /ssh/{$1=\"\"; $2=\"\"; print}' | tail -1)"
# bind C-c new-window "$(ps -ao pid,tty,args | sort | awk '$1 ~ /#{pane_pid}/{VAR=$2} $2 ~ VAR && $3 ~ /ssh/{$1=\"\"; $2=\"\"; print}' | tail -1)"
# bind "C-s" split-window -v "$(tssh)"
# bind "C-v" split-window -h "$(tssh)"
# bind "C-c" new-window "$(tssh)"

bind "=" select-layout tiled
bind "!" break-pane
bind \; choose-tree

# screen-like bindings
bind '"' choose-window
bind "A" command-prompt "rename-window '%%'"
bind "Escape" copy-mode
bind "Enter" copy-mode

# double clicking selects the word also when not in copy-mode.
bind-key -T root DoubleClick1Pane  select-pane \; copy-mode \; send-keys -X select-word

# buffers
bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

# }}} Keybindings

# Clipboard {{{

# deprecated for prefering tmux-yank plugin

unbind-key -T copy-mode-vi M-w
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X stop-selection

# use reattach-to-user-namespace
if-shell 'test "$(uname)" = "Darwin"' \
  'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'

# macOS clipboard fixes - https://gist.github.com/algesten/0ba2d7c19763db6a7396126e8526b65b
# The `reattach-to-user-namespace` command is no longer needed as of tmux-2.6.
# if-shell 'test "$(uname)" = "Darwin"' \
#   'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"; \
#   bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"'

# if-shell 'test "$(uname)" = "Linux"' \
#   'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"; \
#   bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"; \
#   bind-key p run "xsel -o | tmux load-buffer - ; tmux paste-buffer"'

# }}} Clipboard

# Colors {{{

## from https://github.com/egel/tmux-gruvbox

## COLORSCHEME: gruvbox dark
set-option -g status "on"

# default statusbar color
set-option -g status-style bg=colour237,fg=colour223 # bg=bg1, fg=fg1

# default window title colors
set-window-option -g window-status-style bg=colour214,fg=colour237 # bg=yellow, fg=bg1

# default window with an activity alert
set-window-option -g window-status-activity-style bg=colour237,fg=colour248 # bg=bg1, fg=fg3

# active window title colors
set-window-option -g window-status-current-style bg=red,fg=colour237 # fg=bg1

# pane border
set-option -g pane-active-border-style fg=colour250 #fg2
set-option -g pane-border-style fg=colour237 #bg1

# message infos
set-option -g message-style bg=colour239,fg=colour223 # bg=bg2, fg=fg1

# writing commands inactive
set-option -g message-command-style bg=colour239,fg=colour223 # bg=fg3, fg=bg1

# pane number display
set-option -g display-panes-active-colour colour250 #fg2
set-option -g display-panes-colour colour237 #bg1

# clock
set-window-option -g clock-mode-colour colour109 #blue

# bell
set-window-option -g window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg

## Theme settings mixed with colors (unfortunately, but there is no cleaner way)
set-option -g status-justify "left"
set-option -g status-left-style none
set-option -g status-left-length "80"
set-option -g status-right-style none
set-option -g status-right-length "80"
set-window-option -g window-status-separator ""

set-option -g status-left "#[fg=colour248, bg=colour241] #S #[fg=colour241, bg=colour237, nobold, noitalics, nounderscore]"
set-option -g status-right "#[fg=colour239, bg=colour237, nobold, nounderscore, noitalics]#[fg=colour246,bg=colour239] %Y-%m-%d  %H:%M #[fg=colour248, bg=colour239, nobold, noitalics, nounderscore]#[fg=colour237, bg=colour248] #h "

set-window-option -g window-status-current-format "#[fg=colour237, bg=colour214, nobold, noitalics, nounderscore]#[fg=colour239, bg=colour214] #I #[fg=colour239, bg=colour214, bold] #W #[fg=colour214, bg=colour237, nobold, noitalics, nounderscore]"
set-window-option -g window-status-format "#[fg=colour237,bg=colour239,noitalics]#[fg=colour223,bg=colour239] #I #[fg=colour223, bg=colour239] #W #[fg=colour239, bg=colour237, noitalics]"

# }}} Colors

# Plugins {{{

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-sidebar'

# Config for plugins
set -g @continuum-boot 'on'
set -g @continuum-restore 'on'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

# }}} Plugins
